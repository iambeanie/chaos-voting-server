/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class ChaosApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param roomCode (optional) 
     * @param roomPassword (optional) 
     * @return Success
     */
    createGame(roomCode: string | undefined, roomPassword: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Hosting/CreateGame?";
        if (roomCode === null)
            throw new Error("The parameter 'roomCode' cannot be null.");
        else if (roomCode !== undefined)
            url_ += "roomCode=" + encodeURIComponent("" + roomCode) + "&";
        if (roomPassword === null)
            throw new Error("The parameter 'roomPassword' cannot be null.");
        else if (roomPassword !== undefined)
            url_ += "roomPassword=" + encodeURIComponent("" + roomPassword) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateGame(_response);
        });
    }

    protected processCreateGame(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateVoteOptionsForRoom(body: HostVoteOptions | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Hosting/UpdateVoteOptionsForRoom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateVoteOptionsForRoom(_response);
        });
    }

    protected processUpdateVoteOptionsForRoom(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param roomPassword (optional) 
     * @param roomCode (optional) 
     * @return Success
     */
    closeGame(roomPassword: string | undefined, roomCode: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Hosting/CloseGame?";
        if (roomPassword === null)
            throw new Error("The parameter 'roomPassword' cannot be null.");
        else if (roomPassword !== undefined)
            url_ += "roomPassword=" + encodeURIComponent("" + roomPassword) + "&";
        if (roomCode === null)
            throw new Error("The parameter 'roomCode' cannot be null.");
        else if (roomCode !== undefined)
            url_ += "roomCode=" + encodeURIComponent("" + roomCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCloseGame(_response);
        });
    }

    protected processCloseGame(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    hostVoteOptionsTemplate(): Promise<HostVoteOptions> {
        let url_ = this.baseUrl + "/Template/HostVoteOptionsTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHostVoteOptionsTemplate(_response);
        });
    }

    protected processHostVoteOptionsTemplate(response: Response): Promise<HostVoteOptions> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HostVoteOptions.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<HostVoteOptions>(<any>null);
    }

    /**
     * @param roomCode (optional) 
     * @param round (optional) 
     * @param optionId (optional) 
     * @return Success
     */
    vote(roomCode: string | undefined, round: number | undefined, optionId: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Voting/Vote?";
        if (roomCode === null)
            throw new Error("The parameter 'roomCode' cannot be null.");
        else if (roomCode !== undefined)
            url_ += "roomCode=" + encodeURIComponent("" + roomCode) + "&";
        if (round === null)
            throw new Error("The parameter 'round' cannot be null.");
        else if (round !== undefined)
            url_ += "round=" + encodeURIComponent("" + round) + "&";
        if (optionId === null)
            throw new Error("The parameter 'optionId' cannot be null.");
        else if (optionId !== undefined)
            url_ += "optionId=" + encodeURIComponent("" + optionId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processVote(_response);
        });
    }

    protected processVote(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param roomCode (optional) 
     * @return Success
     */
    getCompleteGameState(roomCode: string | undefined): Promise<CompleteGameState> {
        let url_ = this.baseUrl + "/Voting/GetCompleteGameState?";
        if (roomCode === null)
            throw new Error("The parameter 'roomCode' cannot be null.");
        else if (roomCode !== undefined)
            url_ += "roomCode=" + encodeURIComponent("" + roomCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCompleteGameState(_response);
        });
    }

    protected processGetCompleteGameState(response: Response): Promise<CompleteGameState> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompleteGameState.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompleteGameState>(<any>null);
    }

    /**
     * @param roomCode (optional) 
     * @return Success
     */
    getPartialGameState(roomCode: string | undefined): Promise<PartialGameState> {
        let url_ = this.baseUrl + "/Voting/GetPartialGameState?";
        if (roomCode === null)
            throw new Error("The parameter 'roomCode' cannot be null.");
        else if (roomCode !== undefined)
            url_ += "roomCode=" + encodeURIComponent("" + roomCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPartialGameState(_response);
        });
    }

    protected processGetPartialGameState(response: Response): Promise<PartialGameState> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PartialGameState.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PartialGameState>(<any>null);
    }
}

export class CompleteGameState implements ICompleteGameState {
    previousResultDescription?: string | undefined;
    currentRound?: number;
    voteOptionsState?: FullVoteOptionState[] | undefined;

    constructor(data?: ICompleteGameState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.previousResultDescription = _data["previousResultDescription"];
            this.currentRound = _data["currentRound"];
            if (Array.isArray(_data["voteOptionsState"])) {
                this.voteOptionsState = [] as any;
                for (let item of _data["voteOptionsState"])
                    this.voteOptionsState!.push(FullVoteOptionState.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CompleteGameState {
        data = typeof data === 'object' ? data : {};
        let result = new CompleteGameState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["previousResultDescription"] = this.previousResultDescription;
        data["currentRound"] = this.currentRound;
        if (Array.isArray(this.voteOptionsState)) {
            data["voteOptionsState"] = [];
            for (let item of this.voteOptionsState)
                data["voteOptionsState"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICompleteGameState {
    previousResultDescription?: string | undefined;
    currentRound?: number;
    voteOptionsState?: FullVoteOptionState[] | undefined;
}

export class FullVoteOptionState implements IFullVoteOptionState {
    id?: number;
    count?: number;
    description?: string | undefined;

    constructor(data?: IFullVoteOptionState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.count = _data["count"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): FullVoteOptionState {
        data = typeof data === 'object' ? data : {};
        let result = new FullVoteOptionState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["count"] = this.count;
        data["description"] = this.description;
        return data; 
    }
}

export interface IFullVoteOptionState {
    id?: number;
    count?: number;
    description?: string | undefined;
}

export class HostVoteOption implements IHostVoteOption {
    chaosId?: string | undefined;
    description?: string | undefined;

    constructor(data?: IHostVoteOption) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.chaosId = _data["chaosId"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): HostVoteOption {
        data = typeof data === 'object' ? data : {};
        let result = new HostVoteOption();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["chaosId"] = this.chaosId;
        data["description"] = this.description;
        return data; 
    }
}

export interface IHostVoteOption {
    chaosId?: string | undefined;
    description?: string | undefined;
}

export class HostVoteOptions implements IHostVoteOptions {
    roomCode?: string | undefined;
    voteOptions?: HostVoteOption[] | undefined;

    constructor(data?: IHostVoteOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomCode = _data["roomCode"];
            if (Array.isArray(_data["voteOptions"])) {
                this.voteOptions = [] as any;
                for (let item of _data["voteOptions"])
                    this.voteOptions!.push(HostVoteOption.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HostVoteOptions {
        data = typeof data === 'object' ? data : {};
        let result = new HostVoteOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomCode"] = this.roomCode;
        if (Array.isArray(this.voteOptions)) {
            data["voteOptions"] = [];
            for (let item of this.voteOptions)
                data["voteOptions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IHostVoteOptions {
    roomCode?: string | undefined;
    voteOptions?: HostVoteOption[] | undefined;
}

export class PartialGameState implements IPartialGameState {
    partialVoteStates?: PartialVoteState[] | undefined;

    constructor(data?: IPartialGameState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["partialVoteStates"])) {
                this.partialVoteStates = [] as any;
                for (let item of _data["partialVoteStates"])
                    this.partialVoteStates!.push(PartialVoteState.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PartialGameState {
        data = typeof data === 'object' ? data : {};
        let result = new PartialGameState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.partialVoteStates)) {
            data["partialVoteStates"] = [];
            for (let item of this.partialVoteStates)
                data["partialVoteStates"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPartialGameState {
    partialVoteStates?: PartialVoteState[] | undefined;
}

export class PartialVoteState implements IPartialVoteState {
    id?: number;
    count?: number;

    constructor(data?: IPartialVoteState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PartialVoteState {
        data = typeof data === 'object' ? data : {};
        let result = new PartialVoteState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["count"] = this.count;
        return data; 
    }
}

export interface IPartialVoteState {
    id?: number;
    count?: number;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}